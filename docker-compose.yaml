version: '3.8'

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW_HOME=/opt/airflow
    - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here
    - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    - AIRFLOW__WEBSERVER__RBAC=True
    - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    - PYTHONPATH=/opt/airflow
    - AIRFLOW_UID=50000
    - AIRFLOW_GID=0
  volumes:
    - ./airflow/dags:/opt/airflow/dags:rw
    - ./logs:/opt/airflow/logs:rw
    - ./data:/opt/airflow/data:rw
    - ./models:/opt/airflow/models:rw
    - ./src:/opt/airflow/src:ro
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - airflow-network

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      timeout: 30s
    restart: always
    networks:
      - airflow-network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command: -c "airflow db init && 
      airflow users create 
        --username admin 
        --password admin 
        --firstname Admin 
        --lastname User 
        --role Admin 
        --email admin@example.com"
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - airflow-init

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - airflow-init

networks:
  airflow-network:
    driver: bridge

volumes:
  postgres-db-volume: 